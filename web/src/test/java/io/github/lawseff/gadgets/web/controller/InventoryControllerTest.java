package io.github.lawseff.gadgets.web.controller;

import org.junit.jupiter.api.Test;
import org.springframework.http.MediaType;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

class InventoryControllerTest extends ApiTest {

  @Test
  void getSummaryWorks() throws Exception {
    var gadgetIdArray = "[\"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\"]".formatted(
        testData.getActionCamera().getId(), testData.getBluetoothSpeaker().getId(), testData.getDrone().getId(),
        // Two gadgets of the same type
        testData.getHeadphones().getId(), testData.getHeadphones().getId(), testData.getClock().getId()
    );
    mockMvc.perform(
        post(
            "/inventory/summary")
            .contentType(MediaType.APPLICATION_JSON)
            .content("{ \"gadgetIds\": %s }".formatted(gadgetIdArray))
        )
        .andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON))
        .andExpect(
            content().json(
                """
                  {
                    "gadgetIds": %s,
                    "volume": {
                      "value": 12.456,
                      "unit": "LITER"
                    }
                  }
                """.formatted(gadgetIdArray)
            )
        );
  }

  @Test
  void getSummaryWorksForEmptyList() throws Exception {
    mockMvc.perform(
        post(
            "/inventory/summary")
            .contentType(MediaType.APPLICATION_JSON)
            .content("{ \"gadgetIds\": [] }")
        )
        .andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON))
        .andExpect(
            content().json(
                """
                  {
                    "gadgetIds": [],
                    "volume": {
                      "value": 0,
                      "unit": "LITER"
                    }
                  }
                """
            )
        );
  }

  @Test
  void getSummaryBadRequestWhenTooManyIds() throws Exception {
    var bigGadgetIdArray = buildJsonIdArray(501);

    mockMvc.perform(
        post(
            "/inventory/summary")
            .contentType(MediaType.APPLICATION_JSON)
            .content("{ \"gadgetIds\": %s }".formatted(bigGadgetIdArray))
        )
        .andExpect(status().isBadRequest());
  }

  @Test
  void getSummaryNotFoundWhenIdNotExists() throws Exception {
    mockMvc.perform(
        post(
            "/inventory/summary")
            .contentType(MediaType.APPLICATION_JSON)
            // Non-existent ID. Assuming it won't collide with the IDs, generated by Hibernate
            .content("{ \"gadgetIds\": [\"30c039f0-784c-477c-a327-873e3484f78e\"] }")
        )
        .andExpect(status().isNotFound());
  }

  private String buildJsonIdArray(int count) {
    // String instead of char, because otherwise it would be cast to int (the capacity)
    var builder = new StringBuilder("[");
    var sampleId = testData.getHeadphones().getId();
    for (int i = 1; i <= count; i++) {
      builder.append('"');
      builder.append(sampleId);
      builder.append('"');;
      boolean notLast = i != count;
      if (notLast) {
        builder.append(',');
      }
    }
    builder.append(']');
    return builder.toString();
  }

}